function y = layerOutput(layerNum,input,network)
switch layerNum
case 1
xmax(1) = network.weight{1}(1,1)*input.max(1)+network.weight{1}(1,2)*input.min(2)+network.bias{1}(1);
xmin(1) = network.weight{1}(1,1)*input.min(1)+network.weight{1}(1,2)*input.max(2)+network.bias{1}(1);
xmax(2) = network.weight{1}(2,1)*input.max(1)+network.weight{1}(2,2)*input.min(2)+network.bias{1}(2);
xmin(2) = network.weight{1}(2,1)*input.min(1)+network.weight{1}(2,2)*input.max(2)+network.bias{1}(2);
xmax(3) = network.weight{1}(3,1)*input.max(1)+network.weight{1}(3,2)*input.max(2)+network.bias{1}(3);
xmin(3) = network.weight{1}(3,1)*input.min(1)+network.weight{1}(3,2)*input.min(2)+network.bias{1}(3);
xmax(4) = network.weight{1}(4,1)*input.min(1)+network.weight{1}(4,2)*input.min(2)+network.bias{1}(4);
xmin(4) = network.weight{1}(4,1)*input.max(1)+network.weight{1}(4,2)*input.max(2)+network.bias{1}(4);
xmax(5) = network.weight{1}(5,1)*input.max(1)+network.weight{1}(5,2)*input.max(2)+network.bias{1}(5);
xmin(5) = network.weight{1}(5,1)*input.min(1)+network.weight{1}(5,2)*input.min(2)+network.bias{1}(5);
xmax(6) = network.weight{1}(6,1)*input.max(1)+network.weight{1}(6,2)*input.min(2)+network.bias{1}(6);
xmin(6) = network.weight{1}(6,1)*input.min(1)+network.weight{1}(6,2)*input.max(2)+network.bias{1}(6);
xmax(7) = network.weight{1}(7,1)*input.max(1)+network.weight{1}(7,2)*input.max(2)+network.bias{1}(7);
xmin(7) = network.weight{1}(7,1)*input.min(1)+network.weight{1}(7,2)*input.min(2)+network.bias{1}(7);
xmax(8) = network.weight{1}(8,1)*input.max(1)+network.weight{1}(8,2)*input.max(2)+network.bias{1}(8);
xmin(8) = network.weight{1}(8,1)*input.min(1)+network.weight{1}(8,2)*input.min(2)+network.bias{1}(8);
xmax(9) = network.weight{1}(9,1)*input.max(1)+network.weight{1}(9,2)*input.min(2)+network.bias{1}(9);
xmin(9) = network.weight{1}(9,1)*input.min(1)+network.weight{1}(9,2)*input.max(2)+network.bias{1}(9);
xmax(10) = network.weight{1}(10,1)*input.max(1)+network.weight{1}(10,2)*input.min(2)+network.bias{1}(10);
xmin(10) = network.weight{1}(10,1)*input.min(1)+network.weight{1}(10,2)*input.max(2)+network.bias{1}(10);
y.min = activeFun(xmin,network.activeType{1});
y.max = activeFun(xmax,network.activeType{1});
case 2
xmax(1) = network.weight{2}(1,1)*input.max(1)+network.weight{2}(1,2)*input.max(2)+network.weight{2}(1,3)*input.max(3)+network.weight{2}(1,4)*input.max(4)+network.weight{2}(1,5)*input.max(5)+network.weight{2}(1,6)*input.min(6)+network.weight{2}(1,7)*input.min(7)+network.weight{2}(1,8)*input.max(8)+network.weight{2}(1,9)*input.max(9)+network.weight{2}(1,10)*input.max(10)+network.bias{2}(1);
xmin(1) = network.weight{2}(1,1)*input.min(1)+network.weight{2}(1,2)*input.min(2)+network.weight{2}(1,3)*input.min(3)+network.weight{2}(1,4)*input.min(4)+network.weight{2}(1,5)*input.min(5)+network.weight{2}(1,6)*input.max(6)+network.weight{2}(1,7)*input.max(7)+network.weight{2}(1,8)*input.min(8)+network.weight{2}(1,9)*input.min(9)+network.weight{2}(1,10)*input.min(10)+network.bias{2}(1);
xmax(2) = network.weight{2}(2,1)*input.max(1)+network.weight{2}(2,2)*input.min(2)+network.weight{2}(2,3)*input.min(3)+network.weight{2}(2,4)*input.max(4)+network.weight{2}(2,5)*input.min(5)+network.weight{2}(2,6)*input.max(6)+network.weight{2}(2,7)*input.max(7)+network.weight{2}(2,8)*input.max(8)+network.weight{2}(2,9)*input.max(9)+network.weight{2}(2,10)*input.max(10)+network.bias{2}(2);
xmin(2) = network.weight{2}(2,1)*input.min(1)+network.weight{2}(2,2)*input.max(2)+network.weight{2}(2,3)*input.max(3)+network.weight{2}(2,4)*input.min(4)+network.weight{2}(2,5)*input.max(5)+network.weight{2}(2,6)*input.min(6)+network.weight{2}(2,7)*input.min(7)+network.weight{2}(2,8)*input.min(8)+network.weight{2}(2,9)*input.min(9)+network.weight{2}(2,10)*input.min(10)+network.bias{2}(2);
xmax(3) = network.weight{2}(3,1)*input.min(1)+network.weight{2}(3,2)*input.min(2)+network.weight{2}(3,3)*input.max(3)+network.weight{2}(3,4)*input.min(4)+network.weight{2}(3,5)*input.max(5)+network.weight{2}(3,6)*input.max(6)+network.weight{2}(3,7)*input.max(7)+network.weight{2}(3,8)*input.min(8)+network.weight{2}(3,9)*input.min(9)+network.weight{2}(3,10)*input.min(10)+network.bias{2}(3);
xmin(3) = network.weight{2}(3,1)*input.max(1)+network.weight{2}(3,2)*input.max(2)+network.weight{2}(3,3)*input.min(3)+network.weight{2}(3,4)*input.max(4)+network.weight{2}(3,5)*input.min(5)+network.weight{2}(3,6)*input.min(6)+network.weight{2}(3,7)*input.min(7)+network.weight{2}(3,8)*input.max(8)+network.weight{2}(3,9)*input.max(9)+network.weight{2}(3,10)*input.max(10)+network.bias{2}(3);
xmax(4) = network.weight{2}(4,1)*input.min(1)+network.weight{2}(4,2)*input.max(2)+network.weight{2}(4,3)*input.min(3)+network.weight{2}(4,4)*input.max(4)+network.weight{2}(4,5)*input.min(5)+network.weight{2}(4,6)*input.min(6)+network.weight{2}(4,7)*input.min(7)+network.weight{2}(4,8)*input.max(8)+network.weight{2}(4,9)*input.max(9)+network.weight{2}(4,10)*input.min(10)+network.bias{2}(4);
xmin(4) = network.weight{2}(4,1)*input.max(1)+network.weight{2}(4,2)*input.min(2)+network.weight{2}(4,3)*input.max(3)+network.weight{2}(4,4)*input.min(4)+network.weight{2}(4,5)*input.max(5)+network.weight{2}(4,6)*input.max(6)+network.weight{2}(4,7)*input.max(7)+network.weight{2}(4,8)*input.min(8)+network.weight{2}(4,9)*input.min(9)+network.weight{2}(4,10)*input.max(10)+network.bias{2}(4);
xmax(5) = network.weight{2}(5,1)*input.min(1)+network.weight{2}(5,2)*input.min(2)+network.weight{2}(5,3)*input.max(3)+network.weight{2}(5,4)*input.max(4)+network.weight{2}(5,5)*input.max(5)+network.weight{2}(5,6)*input.max(6)+network.weight{2}(5,7)*input.min(7)+network.weight{2}(5,8)*input.min(8)+network.weight{2}(5,9)*input.max(9)+network.weight{2}(5,10)*input.max(10)+network.bias{2}(5);
xmin(5) = network.weight{2}(5,1)*input.max(1)+network.weight{2}(5,2)*input.max(2)+network.weight{2}(5,3)*input.min(3)+network.weight{2}(5,4)*input.min(4)+network.weight{2}(5,5)*input.min(5)+network.weight{2}(5,6)*input.min(6)+network.weight{2}(5,7)*input.max(7)+network.weight{2}(5,8)*input.max(8)+network.weight{2}(5,9)*input.min(9)+network.weight{2}(5,10)*input.min(10)+network.bias{2}(5);
xmax(6) = network.weight{2}(6,1)*input.min(1)+network.weight{2}(6,2)*input.max(2)+network.weight{2}(6,3)*input.max(3)+network.weight{2}(6,4)*input.min(4)+network.weight{2}(6,5)*input.max(5)+network.weight{2}(6,6)*input.min(6)+network.weight{2}(6,7)*input.max(7)+network.weight{2}(6,8)*input.max(8)+network.weight{2}(6,9)*input.max(9)+network.weight{2}(6,10)*input.max(10)+network.bias{2}(6);
xmin(6) = network.weight{2}(6,1)*input.max(1)+network.weight{2}(6,2)*input.min(2)+network.weight{2}(6,3)*input.min(3)+network.weight{2}(6,4)*input.max(4)+network.weight{2}(6,5)*input.min(5)+network.weight{2}(6,6)*input.max(6)+network.weight{2}(6,7)*input.min(7)+network.weight{2}(6,8)*input.min(8)+network.weight{2}(6,9)*input.min(9)+network.weight{2}(6,10)*input.min(10)+network.bias{2}(6);
xmax(7) = network.weight{2}(7,1)*input.min(1)+network.weight{2}(7,2)*input.min(2)+network.weight{2}(7,3)*input.max(3)+network.weight{2}(7,4)*input.min(4)+network.weight{2}(7,5)*input.max(5)+network.weight{2}(7,6)*input.max(6)+network.weight{2}(7,7)*input.min(7)+network.weight{2}(7,8)*input.max(8)+network.weight{2}(7,9)*input.min(9)+network.weight{2}(7,10)*input.min(10)+network.bias{2}(7);
xmin(7) = network.weight{2}(7,1)*input.max(1)+network.weight{2}(7,2)*input.max(2)+network.weight{2}(7,3)*input.min(3)+network.weight{2}(7,4)*input.max(4)+network.weight{2}(7,5)*input.min(5)+network.weight{2}(7,6)*input.min(6)+network.weight{2}(7,7)*input.max(7)+network.weight{2}(7,8)*input.min(8)+network.weight{2}(7,9)*input.max(9)+network.weight{2}(7,10)*input.max(10)+network.bias{2}(7);
xmax(8) = network.weight{2}(8,1)*input.min(1)+network.weight{2}(8,2)*input.min(2)+network.weight{2}(8,3)*input.max(3)+network.weight{2}(8,4)*input.min(4)+network.weight{2}(8,5)*input.max(5)+network.weight{2}(8,6)*input.max(6)+network.weight{2}(8,7)*input.min(7)+network.weight{2}(8,8)*input.max(8)+network.weight{2}(8,9)*input.min(9)+network.weight{2}(8,10)*input.min(10)+network.bias{2}(8);
xmin(8) = network.weight{2}(8,1)*input.max(1)+network.weight{2}(8,2)*input.max(2)+network.weight{2}(8,3)*input.min(3)+network.weight{2}(8,4)*input.max(4)+network.weight{2}(8,5)*input.min(5)+network.weight{2}(8,6)*input.min(6)+network.weight{2}(8,7)*input.max(7)+network.weight{2}(8,8)*input.min(8)+network.weight{2}(8,9)*input.max(9)+network.weight{2}(8,10)*input.max(10)+network.bias{2}(8);
xmax(9) = network.weight{2}(9,1)*input.max(1)+network.weight{2}(9,2)*input.max(2)+network.weight{2}(9,3)*input.min(3)+network.weight{2}(9,4)*input.min(4)+network.weight{2}(9,5)*input.min(5)+network.weight{2}(9,6)*input.max(6)+network.weight{2}(9,7)*input.min(7)+network.weight{2}(9,8)*input.min(8)+network.weight{2}(9,9)*input.min(9)+network.weight{2}(9,10)*input.min(10)+network.bias{2}(9);
xmin(9) = network.weight{2}(9,1)*input.min(1)+network.weight{2}(9,2)*input.min(2)+network.weight{2}(9,3)*input.max(3)+network.weight{2}(9,4)*input.max(4)+network.weight{2}(9,5)*input.max(5)+network.weight{2}(9,6)*input.min(6)+network.weight{2}(9,7)*input.max(7)+network.weight{2}(9,8)*input.max(8)+network.weight{2}(9,9)*input.max(9)+network.weight{2}(9,10)*input.max(10)+network.bias{2}(9);
xmax(10) = network.weight{2}(10,1)*input.min(1)+network.weight{2}(10,2)*input.min(2)+network.weight{2}(10,3)*input.max(3)+network.weight{2}(10,4)*input.min(4)+network.weight{2}(10,5)*input.max(5)+network.weight{2}(10,6)*input.max(6)+network.weight{2}(10,7)*input.min(7)+network.weight{2}(10,8)*input.min(8)+network.weight{2}(10,9)*input.max(9)+network.weight{2}(10,10)*input.max(10)+network.bias{2}(10);
xmin(10) = network.weight{2}(10,1)*input.max(1)+network.weight{2}(10,2)*input.max(2)+network.weight{2}(10,3)*input.min(3)+network.weight{2}(10,4)*input.max(4)+network.weight{2}(10,5)*input.min(5)+network.weight{2}(10,6)*input.min(6)+network.weight{2}(10,7)*input.max(7)+network.weight{2}(10,8)*input.max(8)+network.weight{2}(10,9)*input.min(9)+network.weight{2}(10,10)*input.min(10)+network.bias{2}(10);
y.min = activeFun(xmin,network.activeType{2});
y.max = activeFun(xmax,network.activeType{2});
case 3
xmax(1) = network.weight{3}(1,1)*input.max(1)+network.weight{3}(1,2)*input.min(2)+network.weight{3}(1,3)*input.max(3)+network.weight{3}(1,4)*input.max(4)+network.weight{3}(1,5)*input.min(5)+network.weight{3}(1,6)*input.min(6)+network.weight{3}(1,7)*input.min(7)+network.weight{3}(1,8)*input.min(8)+network.weight{3}(1,9)*input.min(9)+network.weight{3}(1,10)*input.min(10)+network.bias{3}(1);
xmin(1) = network.weight{3}(1,1)*input.min(1)+network.weight{3}(1,2)*input.max(2)+network.weight{3}(1,3)*input.min(3)+network.weight{3}(1,4)*input.min(4)+network.weight{3}(1,5)*input.max(5)+network.weight{3}(1,6)*input.max(6)+network.weight{3}(1,7)*input.max(7)+network.weight{3}(1,8)*input.max(8)+network.weight{3}(1,9)*input.max(9)+network.weight{3}(1,10)*input.max(10)+network.bias{3}(1);
xmax(2) = network.weight{3}(2,1)*input.min(1)+network.weight{3}(2,2)*input.min(2)+network.weight{3}(2,3)*input.min(3)+network.weight{3}(2,4)*input.min(4)+network.weight{3}(2,5)*input.max(5)+network.weight{3}(2,6)*input.max(6)+network.weight{3}(2,7)*input.max(7)+network.weight{3}(2,8)*input.max(8)+network.weight{3}(2,9)*input.min(9)+network.weight{3}(2,10)*input.min(10)+network.bias{3}(2);
xmin(2) = network.weight{3}(2,1)*input.max(1)+network.weight{3}(2,2)*input.max(2)+network.weight{3}(2,3)*input.max(3)+network.weight{3}(2,4)*input.max(4)+network.weight{3}(2,5)*input.min(5)+network.weight{3}(2,6)*input.min(6)+network.weight{3}(2,7)*input.min(7)+network.weight{3}(2,8)*input.min(8)+network.weight{3}(2,9)*input.max(9)+network.weight{3}(2,10)*input.max(10)+network.bias{3}(2);
xmax(3) = network.weight{3}(3,1)*input.max(1)+network.weight{3}(3,2)*input.min(2)+network.weight{3}(3,3)*input.max(3)+network.weight{3}(3,4)*input.max(4)+network.weight{3}(3,5)*input.max(5)+network.weight{3}(3,6)*input.max(6)+network.weight{3}(3,7)*input.max(7)+network.weight{3}(3,8)*input.min(8)+network.weight{3}(3,9)*input.min(9)+network.weight{3}(3,10)*input.min(10)+network.bias{3}(3);
xmin(3) = network.weight{3}(3,1)*input.min(1)+network.weight{3}(3,2)*input.max(2)+network.weight{3}(3,3)*input.min(3)+network.weight{3}(3,4)*input.min(4)+network.weight{3}(3,5)*input.min(5)+network.weight{3}(3,6)*input.min(6)+network.weight{3}(3,7)*input.min(7)+network.weight{3}(3,8)*input.max(8)+network.weight{3}(3,9)*input.max(9)+network.weight{3}(3,10)*input.max(10)+network.bias{3}(3);
xmax(4) = network.weight{3}(4,1)*input.max(1)+network.weight{3}(4,2)*input.max(2)+network.weight{3}(4,3)*input.min(3)+network.weight{3}(4,4)*input.min(4)+network.weight{3}(4,5)*input.min(5)+network.weight{3}(4,6)*input.min(6)+network.weight{3}(4,7)*input.max(7)+network.weight{3}(4,8)*input.min(8)+network.weight{3}(4,9)*input.min(9)+network.weight{3}(4,10)*input.max(10)+network.bias{3}(4);
xmin(4) = network.weight{3}(4,1)*input.min(1)+network.weight{3}(4,2)*input.min(2)+network.weight{3}(4,3)*input.max(3)+network.weight{3}(4,4)*input.max(4)+network.weight{3}(4,5)*input.max(5)+network.weight{3}(4,6)*input.max(6)+network.weight{3}(4,7)*input.min(7)+network.weight{3}(4,8)*input.max(8)+network.weight{3}(4,9)*input.max(9)+network.weight{3}(4,10)*input.min(10)+network.bias{3}(4);
xmax(5) = network.weight{3}(5,1)*input.max(1)+network.weight{3}(5,2)*input.min(2)+network.weight{3}(5,3)*input.min(3)+network.weight{3}(5,4)*input.max(4)+network.weight{3}(5,5)*input.min(5)+network.weight{3}(5,6)*input.max(6)+network.weight{3}(5,7)*input.min(7)+network.weight{3}(5,8)*input.min(8)+network.weight{3}(5,9)*input.max(9)+network.weight{3}(5,10)*input.max(10)+network.bias{3}(5);
xmin(5) = network.weight{3}(5,1)*input.min(1)+network.weight{3}(5,2)*input.max(2)+network.weight{3}(5,3)*input.max(3)+network.weight{3}(5,4)*input.min(4)+network.weight{3}(5,5)*input.max(5)+network.weight{3}(5,6)*input.min(6)+network.weight{3}(5,7)*input.max(7)+network.weight{3}(5,8)*input.max(8)+network.weight{3}(5,9)*input.min(9)+network.weight{3}(5,10)*input.min(10)+network.bias{3}(5);
xmax(6) = network.weight{3}(6,1)*input.min(1)+network.weight{3}(6,2)*input.min(2)+network.weight{3}(6,3)*input.min(3)+network.weight{3}(6,4)*input.min(4)+network.weight{3}(6,5)*input.max(5)+network.weight{3}(6,6)*input.max(6)+network.weight{3}(6,7)*input.max(7)+network.weight{3}(6,8)*input.max(8)+network.weight{3}(6,9)*input.min(9)+network.weight{3}(6,10)*input.min(10)+network.bias{3}(6);
xmin(6) = network.weight{3}(6,1)*input.max(1)+network.weight{3}(6,2)*input.max(2)+network.weight{3}(6,3)*input.max(3)+network.weight{3}(6,4)*input.max(4)+network.weight{3}(6,5)*input.min(5)+network.weight{3}(6,6)*input.min(6)+network.weight{3}(6,7)*input.min(7)+network.weight{3}(6,8)*input.min(8)+network.weight{3}(6,9)*input.max(9)+network.weight{3}(6,10)*input.max(10)+network.bias{3}(6);
xmax(7) = network.weight{3}(7,1)*input.max(1)+network.weight{3}(7,2)*input.min(2)+network.weight{3}(7,3)*input.min(3)+network.weight{3}(7,4)*input.min(4)+network.weight{3}(7,5)*input.max(5)+network.weight{3}(7,6)*input.max(6)+network.weight{3}(7,7)*input.max(7)+network.weight{3}(7,8)*input.max(8)+network.weight{3}(7,9)*input.max(9)+network.weight{3}(7,10)*input.min(10)+network.bias{3}(7);
xmin(7) = network.weight{3}(7,1)*input.min(1)+network.weight{3}(7,2)*input.max(2)+network.weight{3}(7,3)*input.max(3)+network.weight{3}(7,4)*input.max(4)+network.weight{3}(7,5)*input.min(5)+network.weight{3}(7,6)*input.min(6)+network.weight{3}(7,7)*input.min(7)+network.weight{3}(7,8)*input.min(8)+network.weight{3}(7,9)*input.min(9)+network.weight{3}(7,10)*input.max(10)+network.bias{3}(7);
xmax(8) = network.weight{3}(8,1)*input.min(1)+network.weight{3}(8,2)*input.max(2)+network.weight{3}(8,3)*input.min(3)+network.weight{3}(8,4)*input.min(4)+network.weight{3}(8,5)*input.max(5)+network.weight{3}(8,6)*input.max(6)+network.weight{3}(8,7)*input.max(7)+network.weight{3}(8,8)*input.min(8)+network.weight{3}(8,9)*input.min(9)+network.weight{3}(8,10)*input.max(10)+network.bias{3}(8);
xmin(8) = network.weight{3}(8,1)*input.max(1)+network.weight{3}(8,2)*input.min(2)+network.weight{3}(8,3)*input.max(3)+network.weight{3}(8,4)*input.max(4)+network.weight{3}(8,5)*input.min(5)+network.weight{3}(8,6)*input.min(6)+network.weight{3}(8,7)*input.min(7)+network.weight{3}(8,8)*input.max(8)+network.weight{3}(8,9)*input.max(9)+network.weight{3}(8,10)*input.min(10)+network.bias{3}(8);
xmax(9) = network.weight{3}(9,1)*input.min(1)+network.weight{3}(9,2)*input.min(2)+network.weight{3}(9,3)*input.max(3)+network.weight{3}(9,4)*input.min(4)+network.weight{3}(9,5)*input.min(5)+network.weight{3}(9,6)*input.max(6)+network.weight{3}(9,7)*input.min(7)+network.weight{3}(9,8)*input.min(8)+network.weight{3}(9,9)*input.min(9)+network.weight{3}(9,10)*input.max(10)+network.bias{3}(9);
xmin(9) = network.weight{3}(9,1)*input.max(1)+network.weight{3}(9,2)*input.max(2)+network.weight{3}(9,3)*input.min(3)+network.weight{3}(9,4)*input.max(4)+network.weight{3}(9,5)*input.max(5)+network.weight{3}(9,6)*input.min(6)+network.weight{3}(9,7)*input.max(7)+network.weight{3}(9,8)*input.max(8)+network.weight{3}(9,9)*input.max(9)+network.weight{3}(9,10)*input.min(10)+network.bias{3}(9);
xmax(10) = network.weight{3}(10,1)*input.max(1)+network.weight{3}(10,2)*input.min(2)+network.weight{3}(10,3)*input.max(3)+network.weight{3}(10,4)*input.max(4)+network.weight{3}(10,5)*input.min(5)+network.weight{3}(10,6)*input.min(6)+network.weight{3}(10,7)*input.max(7)+network.weight{3}(10,8)*input.max(8)+network.weight{3}(10,9)*input.max(9)+network.weight{3}(10,10)*input.min(10)+network.bias{3}(10);
xmin(10) = network.weight{3}(10,1)*input.min(1)+network.weight{3}(10,2)*input.max(2)+network.weight{3}(10,3)*input.min(3)+network.weight{3}(10,4)*input.min(4)+network.weight{3}(10,5)*input.max(5)+network.weight{3}(10,6)*input.max(6)+network.weight{3}(10,7)*input.min(7)+network.weight{3}(10,8)*input.min(8)+network.weight{3}(10,9)*input.min(9)+network.weight{3}(10,10)*input.max(10)+network.bias{3}(10);
y.min = activeFun(xmin,network.activeType{3});
y.max = activeFun(xmax,network.activeType{3});
case 4
xmax(1) = network.weight{4}(1,1)*input.max(1)+network.weight{4}(1,2)*input.min(2)+network.weight{4}(1,3)*input.max(3)+network.weight{4}(1,4)*input.max(4)+network.weight{4}(1,5)*input.min(5)+network.weight{4}(1,6)*input.max(6)+network.weight{4}(1,7)*input.min(7)+network.weight{4}(1,8)*input.max(8)+network.weight{4}(1,9)*input.min(9)+network.weight{4}(1,10)*input.min(10)+network.bias{4}(1);
xmin(1) = network.weight{4}(1,1)*input.min(1)+network.weight{4}(1,2)*input.max(2)+network.weight{4}(1,3)*input.min(3)+network.weight{4}(1,4)*input.min(4)+network.weight{4}(1,5)*input.max(5)+network.weight{4}(1,6)*input.min(6)+network.weight{4}(1,7)*input.max(7)+network.weight{4}(1,8)*input.min(8)+network.weight{4}(1,9)*input.max(9)+network.weight{4}(1,10)*input.max(10)+network.bias{4}(1);
xmax(2) = network.weight{4}(2,1)*input.max(1)+network.weight{4}(2,2)*input.max(2)+network.weight{4}(2,3)*input.max(3)+network.weight{4}(2,4)*input.min(4)+network.weight{4}(2,5)*input.min(5)+network.weight{4}(2,6)*input.min(6)+network.weight{4}(2,7)*input.max(7)+network.weight{4}(2,8)*input.min(8)+network.weight{4}(2,9)*input.max(9)+network.weight{4}(2,10)*input.min(10)+network.bias{4}(2);
xmin(2) = network.weight{4}(2,1)*input.min(1)+network.weight{4}(2,2)*input.min(2)+network.weight{4}(2,3)*input.min(3)+network.weight{4}(2,4)*input.max(4)+network.weight{4}(2,5)*input.max(5)+network.weight{4}(2,6)*input.max(6)+network.weight{4}(2,7)*input.min(7)+network.weight{4}(2,8)*input.max(8)+network.weight{4}(2,9)*input.min(9)+network.weight{4}(2,10)*input.max(10)+network.bias{4}(2);
xmax(3) = network.weight{4}(3,1)*input.max(1)+network.weight{4}(3,2)*input.max(2)+network.weight{4}(3,3)*input.min(3)+network.weight{4}(3,4)*input.max(4)+network.weight{4}(3,5)*input.min(5)+network.weight{4}(3,6)*input.min(6)+network.weight{4}(3,7)*input.max(7)+network.weight{4}(3,8)*input.min(8)+network.weight{4}(3,9)*input.min(9)+network.weight{4}(3,10)*input.min(10)+network.bias{4}(3);
xmin(3) = network.weight{4}(3,1)*input.min(1)+network.weight{4}(3,2)*input.min(2)+network.weight{4}(3,3)*input.max(3)+network.weight{4}(3,4)*input.min(4)+network.weight{4}(3,5)*input.max(5)+network.weight{4}(3,6)*input.max(6)+network.weight{4}(3,7)*input.min(7)+network.weight{4}(3,8)*input.max(8)+network.weight{4}(3,9)*input.max(9)+network.weight{4}(3,10)*input.max(10)+network.bias{4}(3);
xmax(4) = network.weight{4}(4,1)*input.min(1)+network.weight{4}(4,2)*input.max(2)+network.weight{4}(4,3)*input.max(3)+network.weight{4}(4,4)*input.min(4)+network.weight{4}(4,5)*input.min(5)+network.weight{4}(4,6)*input.max(6)+network.weight{4}(4,7)*input.max(7)+network.weight{4}(4,8)*input.min(8)+network.weight{4}(4,9)*input.max(9)+network.weight{4}(4,10)*input.min(10)+network.bias{4}(4);
xmin(4) = network.weight{4}(4,1)*input.max(1)+network.weight{4}(4,2)*input.min(2)+network.weight{4}(4,3)*input.min(3)+network.weight{4}(4,4)*input.max(4)+network.weight{4}(4,5)*input.max(5)+network.weight{4}(4,6)*input.min(6)+network.weight{4}(4,7)*input.min(7)+network.weight{4}(4,8)*input.max(8)+network.weight{4}(4,9)*input.min(9)+network.weight{4}(4,10)*input.max(10)+network.bias{4}(4);
xmax(5) = network.weight{4}(5,1)*input.min(1)+network.weight{4}(5,2)*input.max(2)+network.weight{4}(5,3)*input.max(3)+network.weight{4}(5,4)*input.min(4)+network.weight{4}(5,5)*input.min(5)+network.weight{4}(5,6)*input.min(6)+network.weight{4}(5,7)*input.max(7)+network.weight{4}(5,8)*input.min(8)+network.weight{4}(5,9)*input.min(9)+network.weight{4}(5,10)*input.max(10)+network.bias{4}(5);
xmin(5) = network.weight{4}(5,1)*input.max(1)+network.weight{4}(5,2)*input.min(2)+network.weight{4}(5,3)*input.min(3)+network.weight{4}(5,4)*input.max(4)+network.weight{4}(5,5)*input.max(5)+network.weight{4}(5,6)*input.max(6)+network.weight{4}(5,7)*input.min(7)+network.weight{4}(5,8)*input.max(8)+network.weight{4}(5,9)*input.max(9)+network.weight{4}(5,10)*input.min(10)+network.bias{4}(5);
xmax(6) = network.weight{4}(6,1)*input.min(1)+network.weight{4}(6,2)*input.max(2)+network.weight{4}(6,3)*input.min(3)+network.weight{4}(6,4)*input.max(4)+network.weight{4}(6,5)*input.max(5)+network.weight{4}(6,6)*input.max(6)+network.weight{4}(6,7)*input.min(7)+network.weight{4}(6,8)*input.min(8)+network.weight{4}(6,9)*input.min(9)+network.weight{4}(6,10)*input.min(10)+network.bias{4}(6);
xmin(6) = network.weight{4}(6,1)*input.max(1)+network.weight{4}(6,2)*input.min(2)+network.weight{4}(6,3)*input.max(3)+network.weight{4}(6,4)*input.min(4)+network.weight{4}(6,5)*input.min(5)+network.weight{4}(6,6)*input.min(6)+network.weight{4}(6,7)*input.max(7)+network.weight{4}(6,8)*input.max(8)+network.weight{4}(6,9)*input.max(9)+network.weight{4}(6,10)*input.max(10)+network.bias{4}(6);
xmax(7) = network.weight{4}(7,1)*input.min(1)+network.weight{4}(7,2)*input.max(2)+network.weight{4}(7,3)*input.min(3)+network.weight{4}(7,4)*input.min(4)+network.weight{4}(7,5)*input.min(5)+network.weight{4}(7,6)*input.max(6)+network.weight{4}(7,7)*input.max(7)+network.weight{4}(7,8)*input.min(8)+network.weight{4}(7,9)*input.max(9)+network.weight{4}(7,10)*input.min(10)+network.bias{4}(7);
xmin(7) = network.weight{4}(7,1)*input.max(1)+network.weight{4}(7,2)*input.min(2)+network.weight{4}(7,3)*input.max(3)+network.weight{4}(7,4)*input.max(4)+network.weight{4}(7,5)*input.max(5)+network.weight{4}(7,6)*input.min(6)+network.weight{4}(7,7)*input.min(7)+network.weight{4}(7,8)*input.max(8)+network.weight{4}(7,9)*input.min(9)+network.weight{4}(7,10)*input.max(10)+network.bias{4}(7);
xmax(8) = network.weight{4}(8,1)*input.min(1)+network.weight{4}(8,2)*input.min(2)+network.weight{4}(8,3)*input.min(3)+network.weight{4}(8,4)*input.min(4)+network.weight{4}(8,5)*input.min(5)+network.weight{4}(8,6)*input.min(6)+network.weight{4}(8,7)*input.max(7)+network.weight{4}(8,8)*input.max(8)+network.weight{4}(8,9)*input.max(9)+network.weight{4}(8,10)*input.min(10)+network.bias{4}(8);
xmin(8) = network.weight{4}(8,1)*input.max(1)+network.weight{4}(8,2)*input.max(2)+network.weight{4}(8,3)*input.max(3)+network.weight{4}(8,4)*input.max(4)+network.weight{4}(8,5)*input.max(5)+network.weight{4}(8,6)*input.max(6)+network.weight{4}(8,7)*input.min(7)+network.weight{4}(8,8)*input.min(8)+network.weight{4}(8,9)*input.min(9)+network.weight{4}(8,10)*input.max(10)+network.bias{4}(8);
xmax(9) = network.weight{4}(9,1)*input.max(1)+network.weight{4}(9,2)*input.max(2)+network.weight{4}(9,3)*input.max(3)+network.weight{4}(9,4)*input.max(4)+network.weight{4}(9,5)*input.max(5)+network.weight{4}(9,6)*input.max(6)+network.weight{4}(9,7)*input.min(7)+network.weight{4}(9,8)*input.max(8)+network.weight{4}(9,9)*input.min(9)+network.weight{4}(9,10)*input.max(10)+network.bias{4}(9);
xmin(9) = network.weight{4}(9,1)*input.min(1)+network.weight{4}(9,2)*input.min(2)+network.weight{4}(9,3)*input.min(3)+network.weight{4}(9,4)*input.min(4)+network.weight{4}(9,5)*input.min(5)+network.weight{4}(9,6)*input.min(6)+network.weight{4}(9,7)*input.max(7)+network.weight{4}(9,8)*input.min(8)+network.weight{4}(9,9)*input.max(9)+network.weight{4}(9,10)*input.min(10)+network.bias{4}(9);
xmax(10) = network.weight{4}(10,1)*input.min(1)+network.weight{4}(10,2)*input.min(2)+network.weight{4}(10,3)*input.max(3)+network.weight{4}(10,4)*input.max(4)+network.weight{4}(10,5)*input.min(5)+network.weight{4}(10,6)*input.min(6)+network.weight{4}(10,7)*input.min(7)+network.weight{4}(10,8)*input.max(8)+network.weight{4}(10,9)*input.min(9)+network.weight{4}(10,10)*input.min(10)+network.bias{4}(10);
xmin(10) = network.weight{4}(10,1)*input.max(1)+network.weight{4}(10,2)*input.max(2)+network.weight{4}(10,3)*input.min(3)+network.weight{4}(10,4)*input.min(4)+network.weight{4}(10,5)*input.max(5)+network.weight{4}(10,6)*input.max(6)+network.weight{4}(10,7)*input.max(7)+network.weight{4}(10,8)*input.min(8)+network.weight{4}(10,9)*input.max(9)+network.weight{4}(10,10)*input.max(10)+network.bias{4}(10);
y.min = activeFun(xmin,network.activeType{4});
y.max = activeFun(xmax,network.activeType{4});
case 5
xmax(1) = network.weight{5}(1,1)*input.max(1)+network.weight{5}(1,2)*input.min(2)+network.weight{5}(1,3)*input.min(3)+network.weight{5}(1,4)*input.min(4)+network.weight{5}(1,5)*input.min(5)+network.weight{5}(1,6)*input.max(6)+network.weight{5}(1,7)*input.min(7)+network.weight{5}(1,8)*input.max(8)+network.weight{5}(1,9)*input.min(9)+network.weight{5}(1,10)*input.max(10)+network.bias{5}(1);
xmin(1) = network.weight{5}(1,1)*input.min(1)+network.weight{5}(1,2)*input.max(2)+network.weight{5}(1,3)*input.max(3)+network.weight{5}(1,4)*input.max(4)+network.weight{5}(1,5)*input.max(5)+network.weight{5}(1,6)*input.min(6)+network.weight{5}(1,7)*input.max(7)+network.weight{5}(1,8)*input.min(8)+network.weight{5}(1,9)*input.max(9)+network.weight{5}(1,10)*input.min(10)+network.bias{5}(1);
xmax(2) = network.weight{5}(2,1)*input.max(1)+network.weight{5}(2,2)*input.max(2)+network.weight{5}(2,3)*input.min(3)+network.weight{5}(2,4)*input.min(4)+network.weight{5}(2,5)*input.min(5)+network.weight{5}(2,6)*input.max(6)+network.weight{5}(2,7)*input.max(7)+network.weight{5}(2,8)*input.max(8)+network.weight{5}(2,9)*input.min(9)+network.weight{5}(2,10)*input.min(10)+network.bias{5}(2);
xmin(2) = network.weight{5}(2,1)*input.min(1)+network.weight{5}(2,2)*input.min(2)+network.weight{5}(2,3)*input.max(3)+network.weight{5}(2,4)*input.max(4)+network.weight{5}(2,5)*input.max(5)+network.weight{5}(2,6)*input.min(6)+network.weight{5}(2,7)*input.min(7)+network.weight{5}(2,8)*input.min(8)+network.weight{5}(2,9)*input.max(9)+network.weight{5}(2,10)*input.max(10)+network.bias{5}(2);
xmax(3) = network.weight{5}(3,1)*input.max(1)+network.weight{5}(3,2)*input.max(2)+network.weight{5}(3,3)*input.min(3)+network.weight{5}(3,4)*input.min(4)+network.weight{5}(3,5)*input.min(5)+network.weight{5}(3,6)*input.min(6)+network.weight{5}(3,7)*input.max(7)+network.weight{5}(3,8)*input.max(8)+network.weight{5}(3,9)*input.max(9)+network.weight{5}(3,10)*input.min(10)+network.bias{5}(3);
xmin(3) = network.weight{5}(3,1)*input.min(1)+network.weight{5}(3,2)*input.min(2)+network.weight{5}(3,3)*input.max(3)+network.weight{5}(3,4)*input.max(4)+network.weight{5}(3,5)*input.max(5)+network.weight{5}(3,6)*input.max(6)+network.weight{5}(3,7)*input.min(7)+network.weight{5}(3,8)*input.min(8)+network.weight{5}(3,9)*input.min(9)+network.weight{5}(3,10)*input.max(10)+network.bias{5}(3);
xmax(4) = network.weight{5}(4,1)*input.max(1)+network.weight{5}(4,2)*input.min(2)+network.weight{5}(4,3)*input.min(3)+network.weight{5}(4,4)*input.min(4)+network.weight{5}(4,5)*input.max(5)+network.weight{5}(4,6)*input.min(6)+network.weight{5}(4,7)*input.min(7)+network.weight{5}(4,8)*input.max(8)+network.weight{5}(4,9)*input.min(9)+network.weight{5}(4,10)*input.max(10)+network.bias{5}(4);
xmin(4) = network.weight{5}(4,1)*input.min(1)+network.weight{5}(4,2)*input.max(2)+network.weight{5}(4,3)*input.max(3)+network.weight{5}(4,4)*input.max(4)+network.weight{5}(4,5)*input.min(5)+network.weight{5}(4,6)*input.max(6)+network.weight{5}(4,7)*input.max(7)+network.weight{5}(4,8)*input.min(8)+network.weight{5}(4,9)*input.max(9)+network.weight{5}(4,10)*input.min(10)+network.bias{5}(4);
xmax(5) = network.weight{5}(5,1)*input.min(1)+network.weight{5}(5,2)*input.max(2)+network.weight{5}(5,3)*input.min(3)+network.weight{5}(5,4)*input.max(4)+network.weight{5}(5,5)*input.min(5)+network.weight{5}(5,6)*input.min(6)+network.weight{5}(5,7)*input.min(7)+network.weight{5}(5,8)*input.max(8)+network.weight{5}(5,9)*input.max(9)+network.weight{5}(5,10)*input.min(10)+network.bias{5}(5);
xmin(5) = network.weight{5}(5,1)*input.max(1)+network.weight{5}(5,2)*input.min(2)+network.weight{5}(5,3)*input.max(3)+network.weight{5}(5,4)*input.min(4)+network.weight{5}(5,5)*input.max(5)+network.weight{5}(5,6)*input.max(6)+network.weight{5}(5,7)*input.max(7)+network.weight{5}(5,8)*input.min(8)+network.weight{5}(5,9)*input.min(9)+network.weight{5}(5,10)*input.max(10)+network.bias{5}(5);
xmax(6) = network.weight{5}(6,1)*input.min(1)+network.weight{5}(6,2)*input.min(2)+network.weight{5}(6,3)*input.max(3)+network.weight{5}(6,4)*input.max(4)+network.weight{5}(6,5)*input.min(5)+network.weight{5}(6,6)*input.max(6)+network.weight{5}(6,7)*input.min(7)+network.weight{5}(6,8)*input.max(8)+network.weight{5}(6,9)*input.max(9)+network.weight{5}(6,10)*input.min(10)+network.bias{5}(6);
xmin(6) = network.weight{5}(6,1)*input.max(1)+network.weight{5}(6,2)*input.max(2)+network.weight{5}(6,3)*input.min(3)+network.weight{5}(6,4)*input.min(4)+network.weight{5}(6,5)*input.max(5)+network.weight{5}(6,6)*input.min(6)+network.weight{5}(6,7)*input.max(7)+network.weight{5}(6,8)*input.min(8)+network.weight{5}(6,9)*input.min(9)+network.weight{5}(6,10)*input.max(10)+network.bias{5}(6);
xmax(7) = network.weight{5}(7,1)*input.min(1)+network.weight{5}(7,2)*input.min(2)+network.weight{5}(7,3)*input.max(3)+network.weight{5}(7,4)*input.max(4)+network.weight{5}(7,5)*input.max(5)+network.weight{5}(7,6)*input.max(6)+network.weight{5}(7,7)*input.max(7)+network.weight{5}(7,8)*input.min(8)+network.weight{5}(7,9)*input.max(9)+network.weight{5}(7,10)*input.max(10)+network.bias{5}(7);
xmin(7) = network.weight{5}(7,1)*input.max(1)+network.weight{5}(7,2)*input.max(2)+network.weight{5}(7,3)*input.min(3)+network.weight{5}(7,4)*input.min(4)+network.weight{5}(7,5)*input.min(5)+network.weight{5}(7,6)*input.min(6)+network.weight{5}(7,7)*input.min(7)+network.weight{5}(7,8)*input.max(8)+network.weight{5}(7,9)*input.min(9)+network.weight{5}(7,10)*input.min(10)+network.bias{5}(7);
xmax(8) = network.weight{5}(8,1)*input.max(1)+network.weight{5}(8,2)*input.max(2)+network.weight{5}(8,3)*input.max(3)+network.weight{5}(8,4)*input.max(4)+network.weight{5}(8,5)*input.max(5)+network.weight{5}(8,6)*input.max(6)+network.weight{5}(8,7)*input.max(7)+network.weight{5}(8,8)*input.max(8)+network.weight{5}(8,9)*input.max(9)+network.weight{5}(8,10)*input.min(10)+network.bias{5}(8);
xmin(8) = network.weight{5}(8,1)*input.min(1)+network.weight{5}(8,2)*input.min(2)+network.weight{5}(8,3)*input.min(3)+network.weight{5}(8,4)*input.min(4)+network.weight{5}(8,5)*input.min(5)+network.weight{5}(8,6)*input.min(6)+network.weight{5}(8,7)*input.min(7)+network.weight{5}(8,8)*input.min(8)+network.weight{5}(8,9)*input.min(9)+network.weight{5}(8,10)*input.max(10)+network.bias{5}(8);
xmax(9) = network.weight{5}(9,1)*input.min(1)+network.weight{5}(9,2)*input.max(2)+network.weight{5}(9,3)*input.max(3)+network.weight{5}(9,4)*input.min(4)+network.weight{5}(9,5)*input.max(5)+network.weight{5}(9,6)*input.min(6)+network.weight{5}(9,7)*input.max(7)+network.weight{5}(9,8)*input.min(8)+network.weight{5}(9,9)*input.min(9)+network.weight{5}(9,10)*input.max(10)+network.bias{5}(9);
xmin(9) = network.weight{5}(9,1)*input.max(1)+network.weight{5}(9,2)*input.min(2)+network.weight{5}(9,3)*input.min(3)+network.weight{5}(9,4)*input.max(4)+network.weight{5}(9,5)*input.min(5)+network.weight{5}(9,6)*input.max(6)+network.weight{5}(9,7)*input.min(7)+network.weight{5}(9,8)*input.max(8)+network.weight{5}(9,9)*input.max(9)+network.weight{5}(9,10)*input.min(10)+network.bias{5}(9);
xmax(10) = network.weight{5}(10,1)*input.min(1)+network.weight{5}(10,2)*input.min(2)+network.weight{5}(10,3)*input.min(3)+network.weight{5}(10,4)*input.min(4)+network.weight{5}(10,5)*input.max(5)+network.weight{5}(10,6)*input.max(6)+network.weight{5}(10,7)*input.max(7)+network.weight{5}(10,8)*input.min(8)+network.weight{5}(10,9)*input.min(9)+network.weight{5}(10,10)*input.max(10)+network.bias{5}(10);
xmin(10) = network.weight{5}(10,1)*input.max(1)+network.weight{5}(10,2)*input.max(2)+network.weight{5}(10,3)*input.max(3)+network.weight{5}(10,4)*input.max(4)+network.weight{5}(10,5)*input.min(5)+network.weight{5}(10,6)*input.min(6)+network.weight{5}(10,7)*input.min(7)+network.weight{5}(10,8)*input.max(8)+network.weight{5}(10,9)*input.max(9)+network.weight{5}(10,10)*input.min(10)+network.bias{5}(10);
y.min = activeFun(xmin,network.activeType{5});
y.max = activeFun(xmax,network.activeType{5});
case 6
xmax(1) = network.weight{6}(1,1)*input.min(1)+network.weight{6}(1,2)*input.min(2)+network.weight{6}(1,3)*input.min(3)+network.weight{6}(1,4)*input.max(4)+network.weight{6}(1,5)*input.min(5)+network.weight{6}(1,6)*input.min(6)+network.weight{6}(1,7)*input.min(7)+network.weight{6}(1,8)*input.min(8)+network.weight{6}(1,9)*input.min(9)+network.weight{6}(1,10)*input.min(10)+network.bias{6}(1);
xmin(1) = network.weight{6}(1,1)*input.max(1)+network.weight{6}(1,2)*input.max(2)+network.weight{6}(1,3)*input.max(3)+network.weight{6}(1,4)*input.min(4)+network.weight{6}(1,5)*input.max(5)+network.weight{6}(1,6)*input.max(6)+network.weight{6}(1,7)*input.max(7)+network.weight{6}(1,8)*input.max(8)+network.weight{6}(1,9)*input.max(9)+network.weight{6}(1,10)*input.max(10)+network.bias{6}(1);
xmax(2) = network.weight{6}(2,1)*input.max(1)+network.weight{6}(2,2)*input.max(2)+network.weight{6}(2,3)*input.max(3)+network.weight{6}(2,4)*input.min(4)+network.weight{6}(2,5)*input.min(5)+network.weight{6}(2,6)*input.min(6)+network.weight{6}(2,7)*input.min(7)+network.weight{6}(2,8)*input.max(8)+network.weight{6}(2,9)*input.min(9)+network.weight{6}(2,10)*input.max(10)+network.bias{6}(2);
xmin(2) = network.weight{6}(2,1)*input.min(1)+network.weight{6}(2,2)*input.min(2)+network.weight{6}(2,3)*input.min(3)+network.weight{6}(2,4)*input.max(4)+network.weight{6}(2,5)*input.max(5)+network.weight{6}(2,6)*input.max(6)+network.weight{6}(2,7)*input.max(7)+network.weight{6}(2,8)*input.min(8)+network.weight{6}(2,9)*input.max(9)+network.weight{6}(2,10)*input.min(10)+network.bias{6}(2);
y.min = activeFun(xmin,network.activeType{6});
y.max = activeFun(xmax,network.activeType{6});
end
